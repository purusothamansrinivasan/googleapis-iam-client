/*
 * Identity and Access Management (IAM) API
 * Manages identity and access control for Google Cloud Platform resources, including the creation of service accounts, which you can use to authenticate to Google and make API calls. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleTypeExpr;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A deny rule in an IAM deny policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T15:02:31.171999+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class GoogleIamV2DenyRule {
  public static final String SERIALIZED_NAME_DENIAL_CONDITION = "denialCondition";
  @SerializedName(SERIALIZED_NAME_DENIAL_CONDITION)
  @javax.annotation.Nullable
  private GoogleTypeExpr denialCondition;

  public static final String SERIALIZED_NAME_DENIED_PERMISSIONS = "deniedPermissions";
  @SerializedName(SERIALIZED_NAME_DENIED_PERMISSIONS)
  @javax.annotation.Nullable
  private List<String> deniedPermissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DENIED_PRINCIPALS = "deniedPrincipals";
  @SerializedName(SERIALIZED_NAME_DENIED_PRINCIPALS)
  @javax.annotation.Nullable
  private List<String> deniedPrincipals = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCEPTION_PERMISSIONS = "exceptionPermissions";
  @SerializedName(SERIALIZED_NAME_EXCEPTION_PERMISSIONS)
  @javax.annotation.Nullable
  private List<String> exceptionPermissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCEPTION_PRINCIPALS = "exceptionPrincipals";
  @SerializedName(SERIALIZED_NAME_EXCEPTION_PRINCIPALS)
  @javax.annotation.Nullable
  private List<String> exceptionPrincipals = new ArrayList<>();

  public GoogleIamV2DenyRule() {
  }

  public GoogleIamV2DenyRule denialCondition(@javax.annotation.Nullable GoogleTypeExpr denialCondition) {
    this.denialCondition = denialCondition;
    return this;
  }

  /**
   * Get denialCondition
   * @return denialCondition
   */
  @javax.annotation.Nullable
  public GoogleTypeExpr getDenialCondition() {
    return denialCondition;
  }

  public void setDenialCondition(@javax.annotation.Nullable GoogleTypeExpr denialCondition) {
    this.denialCondition = denialCondition;
  }


  public GoogleIamV2DenyRule deniedPermissions(@javax.annotation.Nullable List<String> deniedPermissions) {
    this.deniedPermissions = deniedPermissions;
    return this;
  }

  public GoogleIamV2DenyRule addDeniedPermissionsItem(String deniedPermissionsItem) {
    if (this.deniedPermissions == null) {
      this.deniedPermissions = new ArrayList<>();
    }
    this.deniedPermissions.add(deniedPermissionsItem);
    return this;
  }

  /**
   * The permissions that are explicitly denied by this rule. Each permission uses the format &#x60;{service_fqdn}/{resource}.{verb}&#x60;, where &#x60;{service_fqdn}&#x60; is the fully qualified domain name for the service. For example, &#x60;iam.googleapis.com/roles.list&#x60;.
   * @return deniedPermissions
   */
  @javax.annotation.Nullable
  public List<String> getDeniedPermissions() {
    return deniedPermissions;
  }

  public void setDeniedPermissions(@javax.annotation.Nullable List<String> deniedPermissions) {
    this.deniedPermissions = deniedPermissions;
  }


  public GoogleIamV2DenyRule deniedPrincipals(@javax.annotation.Nullable List<String> deniedPrincipals) {
    this.deniedPrincipals = deniedPrincipals;
    return this;
  }

  public GoogleIamV2DenyRule addDeniedPrincipalsItem(String deniedPrincipalsItem) {
    if (this.deniedPrincipals == null) {
      this.deniedPrincipals = new ArrayList<>();
    }
    this.deniedPrincipals.add(deniedPrincipalsItem);
    return this;
  }

  /**
   * The identities that are prevented from using one or more permissions on Google Cloud resources. This field can contain the following values: * &#x60;principal://goog/subject/{email_id}&#x60;: A specific Google Account. Includes Gmail, Cloud Identity, and Google Workspace user accounts. For example, &#x60;principal://goog/subject/alice@example.com&#x60;. * &#x60;principal://iam.googleapis.com/projects/-/serviceAccounts/{service_account_id}&#x60;: A Google Cloud service account. For example, &#x60;principal://iam.googleapis.com/projects/-/serviceAccounts/my-service-account@iam.gserviceaccount.com&#x60;. * &#x60;principalSet://goog/group/{group_id}&#x60;: A Google group. For example, &#x60;principalSet://goog/group/admins@example.com&#x60;. * &#x60;principalSet://goog/public:all&#x60;: A special identifier that represents any principal that is on the internet, even if they do not have a Google Account or are not logged in. * &#x60;principalSet://goog/cloudIdentityCustomerId/{customer_id}&#x60;: All of the principals associated with the specified Google Workspace or Cloud Identity customer ID. For example, &#x60;principalSet://goog/cloudIdentityCustomerId/C01Abc35&#x60;. * &#x60;principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}&#x60;: A single identity in a workforce identity pool. * &#x60;principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}&#x60;: All workforce identities in a group. * &#x60;principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}&#x60;: All workforce identities with a specific attribute value. * &#x60;principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/_*&#x60;: All identities in a workforce identity pool. * &#x60;principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}&#x60;: A single identity in a workload identity pool. * &#x60;principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}&#x60;: A workload identity pool group. * &#x60;principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}&#x60;: All identities in a workload identity pool with a certain attribute. * &#x60;principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/_*&#x60;: All identities in a workload identity pool. * &#x60;deleted:principal://goog/subject/{email_id}?uid&#x3D;{uid}&#x60;: A specific Google Account that was deleted recently. For example, &#x60;deleted:principal://goog/subject/alice@example.com?uid&#x3D;1234567890&#x60;. If the Google Account is recovered, this identifier reverts to the standard identifier for a Google Account. * &#x60;deleted:principalSet://goog/group/{group_id}?uid&#x3D;{uid}&#x60;: A Google group that was deleted recently. For example, &#x60;deleted:principalSet://goog/group/admins@example.com?uid&#x3D;1234567890&#x60;. If the Google group is restored, this identifier reverts to the standard identifier for a Google group. * &#x60;deleted:principal://iam.googleapis.com/projects/-/serviceAccounts/{service_account_id}?uid&#x3D;{uid}&#x60;: A Google Cloud service account that was deleted recently. For example, &#x60;deleted:principal://iam.googleapis.com/projects/-/serviceAccounts/my-service-account@iam.gserviceaccount.com?uid&#x3D;1234567890&#x60;. If the service account is undeleted, this identifier reverts to the standard identifier for a service account. * &#x60;deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}&#x60;: Deleted single identity in a workforce identity pool. For example, &#x60;deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value&#x60;.
   * @return deniedPrincipals
   */
  @javax.annotation.Nullable
  public List<String> getDeniedPrincipals() {
    return deniedPrincipals;
  }

  public void setDeniedPrincipals(@javax.annotation.Nullable List<String> deniedPrincipals) {
    this.deniedPrincipals = deniedPrincipals;
  }


  public GoogleIamV2DenyRule exceptionPermissions(@javax.annotation.Nullable List<String> exceptionPermissions) {
    this.exceptionPermissions = exceptionPermissions;
    return this;
  }

  public GoogleIamV2DenyRule addExceptionPermissionsItem(String exceptionPermissionsItem) {
    if (this.exceptionPermissions == null) {
      this.exceptionPermissions = new ArrayList<>();
    }
    this.exceptionPermissions.add(exceptionPermissionsItem);
    return this;
  }

  /**
   * Specifies the permissions that this rule excludes from the set of denied permissions given by &#x60;denied_permissions&#x60;. If a permission appears in &#x60;denied_permissions&#x60; _and_ in &#x60;exception_permissions&#x60; then it will _not_ be denied. The excluded permissions can be specified using the same syntax as &#x60;denied_permissions&#x60;.
   * @return exceptionPermissions
   */
  @javax.annotation.Nullable
  public List<String> getExceptionPermissions() {
    return exceptionPermissions;
  }

  public void setExceptionPermissions(@javax.annotation.Nullable List<String> exceptionPermissions) {
    this.exceptionPermissions = exceptionPermissions;
  }


  public GoogleIamV2DenyRule exceptionPrincipals(@javax.annotation.Nullable List<String> exceptionPrincipals) {
    this.exceptionPrincipals = exceptionPrincipals;
    return this;
  }

  public GoogleIamV2DenyRule addExceptionPrincipalsItem(String exceptionPrincipalsItem) {
    if (this.exceptionPrincipals == null) {
      this.exceptionPrincipals = new ArrayList<>();
    }
    this.exceptionPrincipals.add(exceptionPrincipalsItem);
    return this;
  }

  /**
   * The identities that are excluded from the deny rule, even if they are listed in the &#x60;denied_principals&#x60;. For example, you could add a Google group to the &#x60;denied_principals&#x60;, then exclude specific users who belong to that group. This field can contain the same values as the &#x60;denied_principals&#x60; field, excluding &#x60;principalSet://goog/public:all&#x60;, which represents all users on the internet.
   * @return exceptionPrincipals
   */
  @javax.annotation.Nullable
  public List<String> getExceptionPrincipals() {
    return exceptionPrincipals;
  }

  public void setExceptionPrincipals(@javax.annotation.Nullable List<String> exceptionPrincipals) {
    this.exceptionPrincipals = exceptionPrincipals;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleIamV2DenyRule googleIamV2DenyRule = (GoogleIamV2DenyRule) o;
    return Objects.equals(this.denialCondition, googleIamV2DenyRule.denialCondition) &&
        Objects.equals(this.deniedPermissions, googleIamV2DenyRule.deniedPermissions) &&
        Objects.equals(this.deniedPrincipals, googleIamV2DenyRule.deniedPrincipals) &&
        Objects.equals(this.exceptionPermissions, googleIamV2DenyRule.exceptionPermissions) &&
        Objects.equals(this.exceptionPrincipals, googleIamV2DenyRule.exceptionPrincipals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(denialCondition, deniedPermissions, deniedPrincipals, exceptionPermissions, exceptionPrincipals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleIamV2DenyRule {\n");
    sb.append("    denialCondition: ").append(toIndentedString(denialCondition)).append("\n");
    sb.append("    deniedPermissions: ").append(toIndentedString(deniedPermissions)).append("\n");
    sb.append("    deniedPrincipals: ").append(toIndentedString(deniedPrincipals)).append("\n");
    sb.append("    exceptionPermissions: ").append(toIndentedString(exceptionPermissions)).append("\n");
    sb.append("    exceptionPrincipals: ").append(toIndentedString(exceptionPrincipals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("denialCondition", "deniedPermissions", "deniedPrincipals", "exceptionPermissions", "exceptionPrincipals"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleIamV2DenyRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleIamV2DenyRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleIamV2DenyRule is not found in the empty JSON string", GoogleIamV2DenyRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleIamV2DenyRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleIamV2DenyRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `denialCondition`
      if (jsonObj.get("denialCondition") != null && !jsonObj.get("denialCondition").isJsonNull()) {
        GoogleTypeExpr.validateJsonElement(jsonObj.get("denialCondition"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deniedPermissions") != null && !jsonObj.get("deniedPermissions").isJsonNull() && !jsonObj.get("deniedPermissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deniedPermissions` to be an array in the JSON string but got `%s`", jsonObj.get("deniedPermissions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deniedPrincipals") != null && !jsonObj.get("deniedPrincipals").isJsonNull() && !jsonObj.get("deniedPrincipals").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deniedPrincipals` to be an array in the JSON string but got `%s`", jsonObj.get("deniedPrincipals").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exceptionPermissions") != null && !jsonObj.get("exceptionPermissions").isJsonNull() && !jsonObj.get("exceptionPermissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exceptionPermissions` to be an array in the JSON string but got `%s`", jsonObj.get("exceptionPermissions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exceptionPrincipals") != null && !jsonObj.get("exceptionPrincipals").isJsonNull() && !jsonObj.get("exceptionPrincipals").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exceptionPrincipals` to be an array in the JSON string but got `%s`", jsonObj.get("exceptionPrincipals").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleIamV2DenyRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleIamV2DenyRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleIamV2DenyRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleIamV2DenyRule.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleIamV2DenyRule>() {
           @Override
           public void write(JsonWriter out, GoogleIamV2DenyRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleIamV2DenyRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleIamV2DenyRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleIamV2DenyRule
   * @throws IOException if the JSON string is invalid with respect to GoogleIamV2DenyRule
   */
  public static GoogleIamV2DenyRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleIamV2DenyRule.class);
  }

  /**
   * Convert an instance of GoogleIamV2DenyRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

